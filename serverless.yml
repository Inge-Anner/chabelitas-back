service: chabelita-back-api
provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  profile: umg-chabelita
  region: us-east-1
  memorySize: 1024
  timeout: 30
  environment:
    ENV: ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.ENV}
    NODE_ENV: ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.NODE_ENV}
    DB_HOST: ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DB_HOST}
    DB_DATABASE: ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DB_DATABASE}
    DB_USERNAME: ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DB_USERNAME}
    DB_PASSWORD: ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DB_PASSWORD}
  deploymentBucket:
    name: serverless-deployments-bucket
    serverSideEncryption: AES256
functions:
  get-products:
    handler: src/services/products.getProducts
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /product
          method: GET
          cors: true
  get-product-byId:
    handler: src/services/products.getProductById
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /product/{productId}
          method: GET
          cors: true
  insert-product:
    handler: src/services/products.insertProduct
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /product
          method: POST
          cors: true
  update-product:
    handler: src/services/products.updateProduct
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /product/{productId}
          method: PUT
          cors: true
  delete-product:
    handler: src/services/products.deleteProduct
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /product/{productId}
          method: DELETE
          cors: true
  get-order-byId:
    handler: src/services/orders.getOrderById
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /order/{orderId}
          method: GET
          cors: true
  get-order-byDate:
    handler: src/services/orders.getOrderByDate
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /order
          method: GET
          cors: true
  insert-order:
    handler: src/services/orders.insertOrder
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /order
          method: POST
          cors: true
  update-order:
    handler: src/services/orders.updateOrder
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /order/{orderId}
          method: PUT
          cors: true
  delete-order:
    handler: src/services/orders.deleteOrderById
    layers:
      - ${file(./config.json):${opt:stage, self:provider.stage, 'dev'}.DEPENDENCIES_LAYER}
    events:
      - http:
          path: /order/{orderId}
          method: DELETE
          cors: true
package:
  patterns:
    - '!dependencies_layer/**'
plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-deployment-bucket
custom:
  prune:
    automatic: true
    number: 3